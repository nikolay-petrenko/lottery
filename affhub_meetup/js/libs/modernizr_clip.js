
/*! modernizr 3.6.0 (Custom Build) | MIT *
 * https://modernizr.com/download/?-backgroundcliptext-setclasses !*/
!function (e, n, t) { function r(e, n) { return typeof e === n } function o() { var e, n, t, o, s, i, l; for (var a in S) if (S.hasOwnProperty(a)) { if (e = [], n = S[a], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++)e.push(n.options.aliases[t].toLowerCase()); for (o = r(n.fn, "function") ? n.fn() : n.fn, s = 0; s < e.length; s++)i = e[s], l = i.split("."), 1 === l.length ? Modernizr[l[0]] = o : (!Modernizr[l[0]] || Modernizr[l[0]] instanceof Boolean || (Modernizr[l[0]] = new Boolean(Modernizr[l[0]])), Modernizr[l[0]][l[1]] = o), C.push((o ? "" : "no-") + l.join("-")) } } function s(e) { var n = _.className, t = Modernizr._config.classPrefix || ""; if (x && (n = n.baseVal), Modernizr._config.enableJSClass) { var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)"); n = n.replace(r, "$1" + t + "js$2") } Modernizr._config.enableClasses && (n += " " + t + e.join(" " + t), x ? _.className.baseVal = n : _.className = n) } function i(e, n) { return !!~("" + e).indexOf(n) } function l() { return "function" != typeof n.createElement ? n.createElement(arguments[0]) : x ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0]) : n.createElement.apply(n, arguments) } function a(e) { return e.replace(/([a-z])-([a-z])/g, function (e, n, t) { return n + t.toUpperCase() }).replace(/^-/, "") } function u(e, n) { return function () { return e.apply(n, arguments) } } function f(e, n, t) { var o; for (var s in e) if (e[s] in n) return t === !1 ? e[s] : (o = n[e[s]], r(o, "function") ? u(o, t || n) : o); return !1 } function c(e) { return e.replace(/([A-Z])/g, function (e, n) { return "-" + n.toLowerCase() }).replace(/^ms-/, "-ms-") } function d(n, t, r) { var o; if ("getComputedStyle" in e) { o = getComputedStyle.call(e, n, t); var s = e.console; if (null !== o) r && (o = o.getPropertyValue(r)); else if (s) { var i = s.error ? "error" : "log"; s[i].call(s, "getComputedStyle returning null, its possible modernizr test results are inaccurate") } } else o = !t && n.currentStyle && n.currentStyle[r]; return o } function p() { var e = n.body; return e || (e = l(x ? "svg" : "body"), e.fake = !0), e } function m(e, t, r, o) { var s, i, a, u, f = "modernizr", c = l("div"), d = p(); if (parseInt(r, 10)) for (; r--;)a = l("div"), a.id = o ? o[r] : f + (r + 1), c.appendChild(a); return s = l("style"), s.type = "text/css", s.id = "s" + f, (d.fake ? d : c).appendChild(s), d.appendChild(c), s.styleSheet ? s.styleSheet.cssText = e : s.appendChild(n.createTextNode(e)), c.id = f, d.fake && (d.style.background = "", d.style.overflow = "hidden", u = _.style.overflow, _.style.overflow = "hidden", _.appendChild(d)), i = t(c, e), d.fake ? (d.parentNode.removeChild(d), _.style.overflow = u, _.offsetHeight) : c.parentNode.removeChild(c), !!i } function y(n, r) { var o = n.length; if ("CSS" in e && "supports" in e.CSS) { for (; o--;)if (e.CSS.supports(c(n[o]), r)) return !0; return !1 } if ("CSSSupportsRule" in e) { for (var s = []; o--;)s.push("(" + c(n[o]) + ":" + r + ")"); return s = s.join(" or "), m("@supports (" + s + ") { #modernizr { position: absolute; } }", function (e) { return "absolute" == d(e, null, "position") }) } return t } function g(e, n, o, s) { function u() { c && (delete N.style, delete N.modElem) } if (s = r(s, "undefined") ? !1 : s, !r(o, "undefined")) { var f = y(e, o); if (!r(f, "undefined")) return f } for (var c, d, p, m, g, v = ["modernizr", "tspan", "samp"]; !N.style && v.length;)c = !0, N.modElem = l(v.shift()), N.style = N.modElem.style; for (p = e.length, d = 0; p > d; d++)if (m = e[d], g = N.style[m], i(m, "-") && (m = a(m)), N.style[m] !== t) { if (s || r(o, "undefined")) return u(), "pfx" == n ? m : !0; try { N.style[m] = o } catch (h) { } if (N.style[m] != g) return u(), "pfx" == n ? m : !0 } return u(), !1 } function v(e, n, t, o, s) { var i = e.charAt(0).toUpperCase() + e.slice(1), l = (e + " " + P.join(i + " ") + i).split(" "); return r(n, "string") || r(n, "undefined") ? g(l, n, o, s) : (l = (e + " " + z.join(i + " ") + i).split(" "), f(l, n, t)) } function h(e, n, r) { return v(e, t, t, n, r) } var C = [], S = [], w = { _version: "3.6.0", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function (e, n) { var t = this; setTimeout(function () { n(t[e]) }, 0) }, addTest: function (e, n, t) { S.push({ name: e, fn: n, options: t }) }, addAsyncTest: function (e) { S.push({ name: null, fn: e }) } }, Modernizr = function () { }; Modernizr.prototype = w, Modernizr = new Modernizr; var _ = n.documentElement, x = "svg" === _.nodeName.toLowerCase(), b = "Moz O ms Webkit", P = w._config.usePrefixes ? b.split(" ") : []; w._cssomPrefixes = P; var z = w._config.usePrefixes ? b.toLowerCase().split(" ") : []; w._domPrefixes = z; var E = { elem: l("modernizr") }; Modernizr._q.push(function () { delete E.elem }); var N = { style: E.elem.style }; Modernizr._q.unshift(function () { delete N.style }), w.testAllProps = v, w.testAllProps = h, Modernizr.addTest("backgroundcliptext", function () { return h("backgroundClip", "text") }), o(), s(C), delete w.addTest, delete w.addAsyncTest; for (var k = 0; k < Modernizr._q.length; k++)Modernizr._q[k](); e.Modernizr = Modernizr }(window, document);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJsaWJzL21vZGVybml6cl9jbGlwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKiEgbW9kZXJuaXpyIDMuNi4wIChDdXN0b20gQnVpbGQpIHwgTUlUICpcclxuICogaHR0cHM6Ly9tb2Rlcm5penIuY29tL2Rvd25sb2FkLz8tYmFja2dyb3VuZGNsaXB0ZXh0LXNldGNsYXNzZXMgISovXHJcbiFmdW5jdGlvbiAoZSwgbiwgdCkgeyBmdW5jdGlvbiByKGUsIG4pIHsgcmV0dXJuIHR5cGVvZiBlID09PSBuIH0gZnVuY3Rpb24gbygpIHsgdmFyIGUsIG4sIHQsIG8sIHMsIGksIGw7IGZvciAodmFyIGEgaW4gUykgaWYgKFMuaGFzT3duUHJvcGVydHkoYSkpIHsgaWYgKGUgPSBbXSwgbiA9IFNbYV0sIG4ubmFtZSAmJiAoZS5wdXNoKG4ubmFtZS50b0xvd2VyQ2FzZSgpKSwgbi5vcHRpb25zICYmIG4ub3B0aW9ucy5hbGlhc2VzICYmIG4ub3B0aW9ucy5hbGlhc2VzLmxlbmd0aCkpIGZvciAodCA9IDA7IHQgPCBuLm9wdGlvbnMuYWxpYXNlcy5sZW5ndGg7IHQrKyllLnB1c2gobi5vcHRpb25zLmFsaWFzZXNbdF0udG9Mb3dlckNhc2UoKSk7IGZvciAobyA9IHIobi5mbiwgXCJmdW5jdGlvblwiKSA/IG4uZm4oKSA6IG4uZm4sIHMgPSAwOyBzIDwgZS5sZW5ndGg7IHMrKylpID0gZVtzXSwgbCA9IGkuc3BsaXQoXCIuXCIpLCAxID09PSBsLmxlbmd0aCA/IE1vZGVybml6cltsWzBdXSA9IG8gOiAoIU1vZGVybml6cltsWzBdXSB8fCBNb2Rlcm5penJbbFswXV0gaW5zdGFuY2VvZiBCb29sZWFuIHx8IChNb2Rlcm5penJbbFswXV0gPSBuZXcgQm9vbGVhbihNb2Rlcm5penJbbFswXV0pKSwgTW9kZXJuaXpyW2xbMF1dW2xbMV1dID0gbyksIEMucHVzaCgobyA/IFwiXCIgOiBcIm5vLVwiKSArIGwuam9pbihcIi1cIikpIH0gfSBmdW5jdGlvbiBzKGUpIHsgdmFyIG4gPSBfLmNsYXNzTmFtZSwgdCA9IE1vZGVybml6ci5fY29uZmlnLmNsYXNzUHJlZml4IHx8IFwiXCI7IGlmICh4ICYmIChuID0gbi5iYXNlVmFsKSwgTW9kZXJuaXpyLl9jb25maWcuZW5hYmxlSlNDbGFzcykgeyB2YXIgciA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIHQgKyBcIm5vLWpzKFxcXFxzfCQpXCIpOyBuID0gbi5yZXBsYWNlKHIsIFwiJDFcIiArIHQgKyBcImpzJDJcIikgfSBNb2Rlcm5penIuX2NvbmZpZy5lbmFibGVDbGFzc2VzICYmIChuICs9IFwiIFwiICsgdCArIGUuam9pbihcIiBcIiArIHQpLCB4ID8gXy5jbGFzc05hbWUuYmFzZVZhbCA9IG4gOiBfLmNsYXNzTmFtZSA9IG4pIH0gZnVuY3Rpb24gaShlLCBuKSB7IHJldHVybiAhIX4oXCJcIiArIGUpLmluZGV4T2YobikgfSBmdW5jdGlvbiBsKCkgeyByZXR1cm4gXCJmdW5jdGlvblwiICE9IHR5cGVvZiBuLmNyZWF0ZUVsZW1lbnQgPyBuLmNyZWF0ZUVsZW1lbnQoYXJndW1lbnRzWzBdKSA6IHggPyBuLmNyZWF0ZUVsZW1lbnROUy5jYWxsKG4sIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgYXJndW1lbnRzWzBdKSA6IG4uY3JlYXRlRWxlbWVudC5hcHBseShuLCBhcmd1bWVudHMpIH0gZnVuY3Rpb24gYShlKSB7IHJldHVybiBlLnJlcGxhY2UoLyhbYS16XSktKFthLXpdKS9nLCBmdW5jdGlvbiAoZSwgbiwgdCkgeyByZXR1cm4gbiArIHQudG9VcHBlckNhc2UoKSB9KS5yZXBsYWNlKC9eLS8sIFwiXCIpIH0gZnVuY3Rpb24gdShlLCBuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBlLmFwcGx5KG4sIGFyZ3VtZW50cykgfSB9IGZ1bmN0aW9uIGYoZSwgbiwgdCkgeyB2YXIgbzsgZm9yICh2YXIgcyBpbiBlKSBpZiAoZVtzXSBpbiBuKSByZXR1cm4gdCA9PT0gITEgPyBlW3NdIDogKG8gPSBuW2Vbc11dLCByKG8sIFwiZnVuY3Rpb25cIikgPyB1KG8sIHQgfHwgbikgOiBvKTsgcmV0dXJuICExIH0gZnVuY3Rpb24gYyhlKSB7IHJldHVybiBlLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24gKGUsIG4pIHsgcmV0dXJuIFwiLVwiICsgbi50b0xvd2VyQ2FzZSgpIH0pLnJlcGxhY2UoL15tcy0vLCBcIi1tcy1cIikgfSBmdW5jdGlvbiBkKG4sIHQsIHIpIHsgdmFyIG87IGlmIChcImdldENvbXB1dGVkU3R5bGVcIiBpbiBlKSB7IG8gPSBnZXRDb21wdXRlZFN0eWxlLmNhbGwoZSwgbiwgdCk7IHZhciBzID0gZS5jb25zb2xlOyBpZiAobnVsbCAhPT0gbykgciAmJiAobyA9IG8uZ2V0UHJvcGVydHlWYWx1ZShyKSk7IGVsc2UgaWYgKHMpIHsgdmFyIGkgPSBzLmVycm9yID8gXCJlcnJvclwiIDogXCJsb2dcIjsgc1tpXS5jYWxsKHMsIFwiZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5pbmcgbnVsbCwgaXRzIHBvc3NpYmxlIG1vZGVybml6ciB0ZXN0IHJlc3VsdHMgYXJlIGluYWNjdXJhdGVcIikgfSB9IGVsc2UgbyA9ICF0ICYmIG4uY3VycmVudFN0eWxlICYmIG4uY3VycmVudFN0eWxlW3JdOyByZXR1cm4gbyB9IGZ1bmN0aW9uIHAoKSB7IHZhciBlID0gbi5ib2R5OyByZXR1cm4gZSB8fCAoZSA9IGwoeCA/IFwic3ZnXCIgOiBcImJvZHlcIiksIGUuZmFrZSA9ICEwKSwgZSB9IGZ1bmN0aW9uIG0oZSwgdCwgciwgbykgeyB2YXIgcywgaSwgYSwgdSwgZiA9IFwibW9kZXJuaXpyXCIsIGMgPSBsKFwiZGl2XCIpLCBkID0gcCgpOyBpZiAocGFyc2VJbnQociwgMTApKSBmb3IgKDsgci0tOylhID0gbChcImRpdlwiKSwgYS5pZCA9IG8gPyBvW3JdIDogZiArIChyICsgMSksIGMuYXBwZW5kQ2hpbGQoYSk7IHJldHVybiBzID0gbChcInN0eWxlXCIpLCBzLnR5cGUgPSBcInRleHQvY3NzXCIsIHMuaWQgPSBcInNcIiArIGYsIChkLmZha2UgPyBkIDogYykuYXBwZW5kQ2hpbGQocyksIGQuYXBwZW5kQ2hpbGQoYyksIHMuc3R5bGVTaGVldCA/IHMuc3R5bGVTaGVldC5jc3NUZXh0ID0gZSA6IHMuYXBwZW5kQ2hpbGQobi5jcmVhdGVUZXh0Tm9kZShlKSksIGMuaWQgPSBmLCBkLmZha2UgJiYgKGQuc3R5bGUuYmFja2dyb3VuZCA9IFwiXCIsIGQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiLCB1ID0gXy5zdHlsZS5vdmVyZmxvdywgXy5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIsIF8uYXBwZW5kQ2hpbGQoZCkpLCBpID0gdChjLCBlKSwgZC5mYWtlID8gKGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkKSwgXy5zdHlsZS5vdmVyZmxvdyA9IHUsIF8ub2Zmc2V0SGVpZ2h0KSA6IGMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKSwgISFpIH0gZnVuY3Rpb24geShuLCByKSB7IHZhciBvID0gbi5sZW5ndGg7IGlmIChcIkNTU1wiIGluIGUgJiYgXCJzdXBwb3J0c1wiIGluIGUuQ1NTKSB7IGZvciAoOyBvLS07KWlmIChlLkNTUy5zdXBwb3J0cyhjKG5bb10pLCByKSkgcmV0dXJuICEwOyByZXR1cm4gITEgfSBpZiAoXCJDU1NTdXBwb3J0c1J1bGVcIiBpbiBlKSB7IGZvciAodmFyIHMgPSBbXTsgby0tOylzLnB1c2goXCIoXCIgKyBjKG5bb10pICsgXCI6XCIgKyByICsgXCIpXCIpOyByZXR1cm4gcyA9IHMuam9pbihcIiBvciBcIiksIG0oXCJAc3VwcG9ydHMgKFwiICsgcyArIFwiKSB7ICNtb2Rlcm5penIgeyBwb3NpdGlvbjogYWJzb2x1dGU7IH0gfVwiLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXCJhYnNvbHV0ZVwiID09IGQoZSwgbnVsbCwgXCJwb3NpdGlvblwiKSB9KSB9IHJldHVybiB0IH0gZnVuY3Rpb24gZyhlLCBuLCBvLCBzKSB7IGZ1bmN0aW9uIHUoKSB7IGMgJiYgKGRlbGV0ZSBOLnN0eWxlLCBkZWxldGUgTi5tb2RFbGVtKSB9IGlmIChzID0gcihzLCBcInVuZGVmaW5lZFwiKSA/ICExIDogcywgIXIobywgXCJ1bmRlZmluZWRcIikpIHsgdmFyIGYgPSB5KGUsIG8pOyBpZiAoIXIoZiwgXCJ1bmRlZmluZWRcIikpIHJldHVybiBmIH0gZm9yICh2YXIgYywgZCwgcCwgbSwgZywgdiA9IFtcIm1vZGVybml6clwiLCBcInRzcGFuXCIsIFwic2FtcFwiXTsgIU4uc3R5bGUgJiYgdi5sZW5ndGg7KWMgPSAhMCwgTi5tb2RFbGVtID0gbCh2LnNoaWZ0KCkpLCBOLnN0eWxlID0gTi5tb2RFbGVtLnN0eWxlOyBmb3IgKHAgPSBlLmxlbmd0aCwgZCA9IDA7IHAgPiBkOyBkKyspaWYgKG0gPSBlW2RdLCBnID0gTi5zdHlsZVttXSwgaShtLCBcIi1cIikgJiYgKG0gPSBhKG0pKSwgTi5zdHlsZVttXSAhPT0gdCkgeyBpZiAocyB8fCByKG8sIFwidW5kZWZpbmVkXCIpKSByZXR1cm4gdSgpLCBcInBmeFwiID09IG4gPyBtIDogITA7IHRyeSB7IE4uc3R5bGVbbV0gPSBvIH0gY2F0Y2ggKGgpIHsgfSBpZiAoTi5zdHlsZVttXSAhPSBnKSByZXR1cm4gdSgpLCBcInBmeFwiID09IG4gPyBtIDogITAgfSByZXR1cm4gdSgpLCAhMSB9IGZ1bmN0aW9uIHYoZSwgbiwgdCwgbywgcykgeyB2YXIgaSA9IGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBlLnNsaWNlKDEpLCBsID0gKGUgKyBcIiBcIiArIFAuam9pbihpICsgXCIgXCIpICsgaSkuc3BsaXQoXCIgXCIpOyByZXR1cm4gcihuLCBcInN0cmluZ1wiKSB8fCByKG4sIFwidW5kZWZpbmVkXCIpID8gZyhsLCBuLCBvLCBzKSA6IChsID0gKGUgKyBcIiBcIiArIHouam9pbihpICsgXCIgXCIpICsgaSkuc3BsaXQoXCIgXCIpLCBmKGwsIG4sIHQpKSB9IGZ1bmN0aW9uIGgoZSwgbiwgcikgeyByZXR1cm4gdihlLCB0LCB0LCBuLCByKSB9IHZhciBDID0gW10sIFMgPSBbXSwgdyA9IHsgX3ZlcnNpb246IFwiMy42LjBcIiwgX2NvbmZpZzogeyBjbGFzc1ByZWZpeDogXCJcIiwgZW5hYmxlQ2xhc3NlczogITAsIGVuYWJsZUpTQ2xhc3M6ICEwLCB1c2VQcmVmaXhlczogITAgfSwgX3E6IFtdLCBvbjogZnVuY3Rpb24gKGUsIG4pIHsgdmFyIHQgPSB0aGlzOyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgbih0W2VdKSB9LCAwKSB9LCBhZGRUZXN0OiBmdW5jdGlvbiAoZSwgbiwgdCkgeyBTLnB1c2goeyBuYW1lOiBlLCBmbjogbiwgb3B0aW9uczogdCB9KSB9LCBhZGRBc3luY1Rlc3Q6IGZ1bmN0aW9uIChlKSB7IFMucHVzaCh7IG5hbWU6IG51bGwsIGZuOiBlIH0pIH0gfSwgTW9kZXJuaXpyID0gZnVuY3Rpb24gKCkgeyB9OyBNb2Rlcm5penIucHJvdG90eXBlID0gdywgTW9kZXJuaXpyID0gbmV3IE1vZGVybml6cjsgdmFyIF8gPSBuLmRvY3VtZW50RWxlbWVudCwgeCA9IFwic3ZnXCIgPT09IF8ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwgYiA9IFwiTW96IE8gbXMgV2Via2l0XCIsIFAgPSB3Ll9jb25maWcudXNlUHJlZml4ZXMgPyBiLnNwbGl0KFwiIFwiKSA6IFtdOyB3Ll9jc3NvbVByZWZpeGVzID0gUDsgdmFyIHogPSB3Ll9jb25maWcudXNlUHJlZml4ZXMgPyBiLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIgXCIpIDogW107IHcuX2RvbVByZWZpeGVzID0gejsgdmFyIEUgPSB7IGVsZW06IGwoXCJtb2Rlcm5penJcIikgfTsgTW9kZXJuaXpyLl9xLnB1c2goZnVuY3Rpb24gKCkgeyBkZWxldGUgRS5lbGVtIH0pOyB2YXIgTiA9IHsgc3R5bGU6IEUuZWxlbS5zdHlsZSB9OyBNb2Rlcm5penIuX3EudW5zaGlmdChmdW5jdGlvbiAoKSB7IGRlbGV0ZSBOLnN0eWxlIH0pLCB3LnRlc3RBbGxQcm9wcyA9IHYsIHcudGVzdEFsbFByb3BzID0gaCwgTW9kZXJuaXpyLmFkZFRlc3QoXCJiYWNrZ3JvdW5kY2xpcHRleHRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gaChcImJhY2tncm91bmRDbGlwXCIsIFwidGV4dFwiKSB9KSwgbygpLCBzKEMpLCBkZWxldGUgdy5hZGRUZXN0LCBkZWxldGUgdy5hZGRBc3luY1Rlc3Q7IGZvciAodmFyIGsgPSAwOyBrIDwgTW9kZXJuaXpyLl9xLmxlbmd0aDsgaysrKU1vZGVybml6ci5fcVtrXSgpOyBlLk1vZGVybml6ciA9IE1vZGVybml6ciB9KHdpbmRvdywgZG9jdW1lbnQpO1xyXG4iXSwiZmlsZSI6ImxpYnMvbW9kZXJuaXpyX2NsaXAuanMifQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
